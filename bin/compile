#!/usr/bin/env bash

build_pack_dir=$(cd $(dirname $(dirname $0)); pwd)
build_dir=$1
cache_dir=$2
erlang_root="${build_dir}/erlang"
elixir_root="${build_dir}/elixir"
mkdir -p $1 $2
mkdir -p ${erlang_root}

language_versions_file="${build_dir}/.language_versions"

source $language_versions_file

if [ -f $language_versions_file ];
then
  source $language_versions_file
else
  echo "       WARNING: .language_versions wasn't found"
  echo "       Setting default language versions"
  echo ${build_pack_dir}/.language_versions
  source ${build_pack_dir}/.language_versions
fi

echo "-----> Will use Erlang ${erlang_version} and Elixir ${elixir_version}"

erlang_tar="OTP_${erlang_version}.tgz"
erlang_source_url="https://s3.amazonaws.com/heroku-buildpack-erlang/${erlang_tar}"
elixir_tar="v${elixir_version}.tar.gz"
elixir_source_url="https://github.com/elixir-lang/elixir/archive/${elixir_tar}"

(
  set -e

  test -f ${cache_dir}/${erlang_tar} && exit

  # To not add too much stuff to the cache dir
  rm -rf ${cache_dir}/*

  cd ${cache_dir}
  echo "-----> Fetching Erlang ${erlang_version}"
  curl -ksO ${erlang_source_url} -o ${erlang_tar} || exit 1
)

echo "-----> Unpacking Erlang ${erlang_version}"
tar zxf ${cache_dir}/${erlang_tar} -C ${erlang_root} --strip-components=2

echo "-----> Installing Erlang ${erlang_version}"
ln -s ${erlang_root} /app/erlang
${erlang_root}/Install -minimal /app/erlang
PATH=/app/erlang/bin:$PATH


echo "-----> Installing Rebar from buildpack"
cp ${build_pack_dir}/rebar ${build_dir}/

PATH=${build_pack_dir}:$PATH

(
  set -e

  # If already cached tarball, means already fetched.
  test -f ${cache_dir}/${elixir_tar} && exit

  cd ${cache_dir}
  echo "-----> Fetching Elixir ${elixir_version} from ${elixir_source_url}"
  curl -LksO ${elixir_source_url} || exit 1
)

rm -rf ${elixir_root}
echo "-----> Extracting: ${cache_dir}/${elixir_tar}"
tar zxf ${cache_dir}/${elixir_tar}
mv "elixir-${elixir_version}" ${elixir_root}

(
  set -e

  echo "-----> Building Elixir ${elixir_version}"
  cd ${elixir_root}
  make > /dev/null
)

ln -s ${elixir_root} /app/elixir
PATH=/app/elixir/bin:$PATH

echo `pwd`
cd ${build_dir}
echo `pwd`

# Unset this var so that if the parent dir is a git repo, it isn't detected
# And all git operations are performed on the respective repos
unset GIT_DIR

echo "-----> Fetching app dependencies with Mix"
MIX_ENV=prod mix deps.get

echo "-----> Compiling the app"
MIX_ENV=prod mix compile

echo "-----> Creating .profile.d with env vars"
mkdir ${build_dir}/.profile.d
